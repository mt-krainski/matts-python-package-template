name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test-open-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: "CI test: create branch, add file, and open PR"
        env:
          BASE_REF: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          BRANCH="ci-test/${BASE_REF}-${RUN_ID}-${RUN_ATTEMPT}"
          FILE="ci-test-${RUN_ID}.txt"
          git checkout -b "$BRANCH"
          echo "This is a CI test at run $RUN_ID attempt $RUN_ATTEMPT" > "$FILE"
          git add "$FILE"
          git commit -m "CI test: add $FILE"
          git push -u origin "$BRANCH"
          gh pr create --title "CI test PR: $FILE" --body "Automated CI test PR created by CI." --base "$BASE_REF" --head "$BRANCH"

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
          version: ${{ vars.POETRY_VERSION }}

      - name: Install Poe
        run: |
          pipx install poethepoet

      - name: Install Cookiecutter
        run: |
          pipx install cookiecutter
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('./poetry.lock') }}

      - name: Install dependencies
        working-directory: .
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        working-directory: .
        run: |
          poe configure

      - name: Run tests
        working-directory: .
        run: |
          source .venv/bin/activate
          poe test-full

      - name: Run lint
        working-directory: .
        run: |
          source .venv/bin/activate
          poe lint

      - name: Run hooks
        working-directory: .
        run: |
          source .venv/bin/activate
          poe hooks-run

      - name: Regenerate example package and verify clean
        working-directory: .
        run: |
          set -euo pipefail
          rm -rf example-package
          cookiecutter . --no-input --overwrite-if-exists project_name="Example Package" -o .
          if git status --porcelain | sed '/example-package\/README.md/d' | grep -q .; then
            echo "Unexpected changes after regenerating template (excluding example-package/README.md):"
            git status --porcelain
            git --no-pager diff --stat
            exit 1
          fi

  dependabot:
    name: "Dependabot"
    needs: [test]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'pull_request' && github.actor == 'dependabot[bot]') || (github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.actor.login == 'dependabot[bot]') }}
    permissions:
      contents: write
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
